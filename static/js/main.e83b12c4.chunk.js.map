{"version":3,"sources":["LastUpdate.tsx","Cap.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LastUpdate","props","time","update","toLocaleTimeString","hour","minute","second","Cap","init","Date","useState","date","setDate","data","setData","getData","fetch","headers","then","response","console","log","json","myJson","useEffect","interval","setInterval","clearInterval","cap","className","href","App","ReactGA","initialize","pageview","window","location","pathname","dataSource","sourceType","screenName","options","height","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAQaA,EAAa,SAACC,GACvB,IAEMC,EAAOD,EAAME,OAAOC,mBAFX,KAEsC,CAAEC,KAAM,UAAWC,OAAQ,UAAWC,OAAQ,YAEnG,OACI,gCACI,+CACT,4BAAIL,QCyDQM,MAxDf,WACE,IAAMC,EAAO,IAAIC,KADJ,EAEWC,mBAASF,GAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGWF,mBAAe,CACrC,uBAAwB,MACxB,qCAAsC,EACtC,+BAAgC,EAChC,8BAA+B,KAC/B,2BAA4B,KAC5B,0BAA2B,KAC3B,qCAAsC,GACtC,mBAAoB,QAXT,mBAGJG,EAHI,KAGEC,EAHF,KAaPC,EAAQ,WACZC,MAAM,kDACL,CACCC,QAAU,CACR,eAAgB,mBAChB,OAAU,sBAIXC,MAAK,SAASC,GAGb,OAFAC,QAAQC,IAAIF,GAELA,EAASG,UAEjBJ,MAAK,SAASK,GACbH,QAAQC,IAAIE,GACZT,EAAQS,OAIdC,qBAAU,WAERZ,EAAQ,IAAIH,MACZM,IACA,IAAMU,EAASC,aAAY,WACzBX,IACAH,EAAQ,IAAIH,QACX,KAGF,OAAM,kBAAIkB,cAAcF,MAC3B,IACF,IAAIG,EAAMf,EAAK,+BAAL,SAAsC,GAAM,GACpD,OACE,sBAAKgB,UAAU,MAAf,UAEID,EAAO,KAAQ,yEAA2C,mBAAGE,KAAK,gCAAR,+BAA3C,IAAyG,uBAAzG,YAA4HF,KAAY,gCAAK,4CAAeA,KAApB,IAA8B,oEACvL,cAAC,EAAD,CAAY1B,OAAQS,Q,eC1BXoB,MAlCf,WAME,OAJEC,IAAQC,WAAW,gBACnBD,IAAQE,SAASC,OAAOC,SAASC,UAIjC,sBAAKR,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACI,sDAEJ,cAAC,EAAD,IACA,cAAC,IAAD,CACJS,WAAY,CACVC,WAAY,UACZC,WAAY,aAEdC,QAAS,CACPC,OAAQ,MAERC,MAAM,SAIV,+BCjBeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCGdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.e83b12c4.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\ninterface Props{\n    update: Date\n}\n\n\n\nexport const LastUpdate = (props: Props) => {\n    const locale = 'en';\n\n    const time = props.update.toLocaleTimeString(locale, { hour: 'numeric', minute: 'numeric', second: 'numeric'});\n  \n    return  (\n        <div>\n            <p>Last Updated: </p>\n   <p>{time}</p>\n    \n    </div>\n    )\n  };","\nimport React,{useState,useEffect} from 'react';\nimport './App.css';\nimport { LastUpdate } from './LastUpdate';\n\ninterface Data\n  {\n    \"mimir//CHURNINTERVAL\": number,\n    \"mimir//FULLIMPLOSSPROTECTIONBLOCKS\": number,\n    \"mimir//FUNDMIGRATIONINTERVAL\": number,\n    \"mimir//MAXIMUMLIQUIDITYRUNE\": number,\n    \"mimir//MINIMUMBONDINRUNE\": number,\n    \"mimir//MINRUNEPOOLDEPTH\": number,\n    \"mimir//OBSERVATIONDELAYFLEXIBILITY\": number,\n    \"mimir//POOLCYCLE\": number\n  }\n\nfunction Cap() {\n  const init = new Date();\n  const [date, setDate] = useState(init)\n    const [data ,setData]=useState<Data>({\n    \"mimir//CHURNINTERVAL\": 288000,\n    \"mimir//FULLIMPLOSSPROTECTIONBLOCKS\": 0,\n    \"mimir//FUNDMIGRATIONINTERVAL\": 0,\n    \"mimir//MAXIMUMLIQUIDITYRUNE\": 50000000000000,\n    \"mimir//MINIMUMBONDINRUNE\": 3000000000000,\n    \"mimir//MINRUNEPOOLDEPTH\": 1000000000000,\n    \"mimir//OBSERVATIONDELAYFLEXIBILITY\": 20,\n    \"mimir//POOLCYCLE\": 14400\n  });\n  const getData=()=>{\n    fetch('https://thornode.thorchain.info/thorchain/mimir'\n    ,{\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n    }\n    )\n      .then(function(response){\n        console.log(response)\n       \n        return response.json();\n      })\n      .then(function(myJson) {\n        console.log(myJson);\n        setData(myJson)\n      });\n  }\n  \n  useEffect(()=>{\n    \n    setDate(new Date());\n    getData();\n    const interval=setInterval(()=>{\n      getData()\n      setDate(new Date()); \n     },10000)\n       \n       \n     return()=>clearInterval(interval)\n},[])\nlet cap = data['mimir//MAXIMUMLIQUIDITYRUNE']/ (10 ** 8);\n  return (\n    <div className=\"App\">\n     \n       {cap  > 750000? <h1> Caps may have been raised! Check here <a href='https://twitter.com/THORChain'>THORChain Twitter</a> <br></br>New Cap: {cap}</h1> : <div><h1>Max Rune: {cap}</h1> <p>Do not attempt to add liquidity.</p></div>}\n      <LastUpdate update={date}></LastUpdate>\n\n    </div>\n  );\n}\n\nexport default Cap;","import './App.css';\nimport Cap from './Cap';\n\nimport { Timeline } from 'react-twitter-widgets'\nimport ReactGA from 'react-ga';\n\n\nfunction App() {\n\n    ReactGA.initialize('G-Z1NEG59QP4');\n    ReactGA.pageview(window.location.pathname);\n\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <h1>Thorchain Pool Cap</h1>\n      </header>\n      <Cap></Cap>\n      <Timeline\n  dataSource={{\n    sourceType: 'profile',\n    screenName: 'THORChain'\n  }}\n  options={{\n    height: '600',\n\n    width:\"65%\"\n  }}\n\n/>\n<script>\n\n</script>\n    \n    </div>\n    \n    \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n//import ReactGA from 'react-ga';\n\n//const trackingId = \"G-LR9FBJY3R0\"; // Replace with your Google Analytics tracking ID\n//ReactGA.initialize(trackingId);\n\n//ReactGA.pageview(\"/thorchain-caps/\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}